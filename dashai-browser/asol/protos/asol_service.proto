syntax = "proto3";

package prometheus_ecosystem.dashai_browser.asol;

option go_package = "github.com/JosephWK/PrometheusProtocol/dashai-browser/asol/protos;asolpb"; // Example Go package
option java_package = "com.prometheusecosystem.dashaibrowser.asol.protos";
option java_multiple_files = true;

// Request to generate or optimize a prompt
message PromptGenerationRequest {
    string template_id = 1;                             // ID of a base template to use (optional if original_prompt_text is provided)
    map<string, string> dynamic_variables = 2;          // Key-value pairs for dynamic content
    map<string, string> context_modifiers = 3;          // E.g., tone, persona
    string original_prompt_text = 4;                    // Raw text from user if not using a template, or base for optimization
    bool apply_optimization = 5;                        // Flag to trigger optimization logic
    string user_id = 6;                                 // Optional: for user-specific context or history
    string session_id = 7;                              // Optional: for session-specific context
}

// Response containing the generated prompt
message PromptGenerationResponse {
    string final_prompt_string = 1;                     // The fully constructed prompt to be sent to an LLM
    string generated_by_template_id = 2;                // The template_id that was used (could be original or an optimized variant ID)
    string error_message = 3;                           // Error message if generation failed
    map<string, string> metadata = 4;                   // E.g., version of optimizer used, confidence score
}

// Request to submit feedback on a prompt interaction
message PromptFeedbackRequest {
    string prompt_instance_id = 1;                      // Unique ID for the specific interaction where the prompt was used
    string template_id_used = 2;                        // The template_id (original or variant) that generated the prompt
    float response_quality_score = 3;                   // E.g., 0.0 to 1.0, could be from automated eval or user input
    optional bool task_success_status = 4;              // Did the interaction achieve its goal?
    optional float user_satisfaction_score = 5;         // E.g., thumbs up/down mapped to a score
    optional string llm_response_id = 6;                // ID of the LLM's response, for linking
    optional string user_comment = 7;                   // Free-text feedback from the user
    string user_id = 8;                                 // Optional: User providing the feedback
    string session_id = 9;                              // Optional: Session context for the feedback
}

// Response acknowledging feedback submission
message PromptFeedbackResponse {
    bool feedback_acknowledged = 1;
    optional string message = 2;                        // E.g., "Feedback received, thank you!"
    optional string feedback_id = 3;                    // ID for the stored feedback record
}


// --- EchoSphere AI-vCPU Interaction Messages ---

// Enum for specifying which type of AI core specialization is preferred or required
enum AiCoreSpecialization {
    CORE_UNSPECIFIED = 0;
    CONTROL_CORE = 1;         // For overall orchestration, task management, complex logic
    LANGUAGE_MODELER = 2;     // For text generation, understanding, summarization, translation
    CREATIVE_GENERATOR = 3;   // For novel content, image generation hints, artistic tasks
    LOGIC_PROCESSOR = 4;      // For reasoning, problem-solving, data analysis
    PRIVACY_GUARDIAN = 5;     // For ensuring data handling aligns with Privacy Protocol
    FUSION_CORE = 6;          // For multimodal data integration
    VISION_INTERPRETER = 7;   // For image/video analysis
    KNOWLEDGE_NAVIGATOR = 8;  // For information retrieval, knowledge graph traversal
    RL_TRAINER = 9;           // For reinforcement learning tasks, agent training
    NEUROPLASTICITY_ENGINE = 10; // For model adaptation, learning new patterns
}

// Request to submit a task to the EchoSphere AI-vCPU
message AiTaskRequest {
    string task_id = 1;                                 // Unique ID for tracking this specific task instance
    string task_type = 2;                               // High-level type of task, e.g., "SUMMARIZE_TEXT", "GENERATE_PROMPT_VARIANT", "ANALYZE_FEEDBACK"
    map<string, string> input_data = 3;                 // Flexible key-value input. Values can be JSON strings for complex data.
                                                        // E.g., {"text_to_summarize": "...", "max_length": "100"}
                                                        // E.g., {"base_template_yaml": "...", "feedback_json": "..."}
    AiCoreSpecialization required_specialization = 4;   // Hint for preferred core or strict requirement
    int32 priority = 5;                                 // Optional task priority (e.g., 0 = normal, higher = more urgent)
    string user_id = 6;                                 // Optional: User context for the task
    string session_id = 7;                              // Optional: Session context for the task
}

// Response from the EchoSphere AI-vCPU after processing a task
message AiTaskResponse {
    string task_id = 1;                                 // Corresponds to the AiTaskRequest.task_id
    bool success = 2;                                   // Was the task processed successfully by the AI-vCPU?
    map<string, string> output_data = 3;                // Flexible key-value output. Values can be JSON strings.
                                                        // E.g., {"summary": "...", "prompt_variant_yaml": "..."}
    string processed_by_core_id = 4;                    // Conceptual ID/name of the AI-vCPU core that handled the task
    string error_message = 5;                           // Error message if success is false
    map<string, string> performance_metrics = 6;        // E.g., {"processing_time_ms": "120", "tokens_used": "500"}
}

// Request to get the status of the EchoSphere AI-vCPU
message VCPUStatusRequest {
    // Could include specific core IDs to query, or be empty for general status
    repeated string core_ids_filter = 1;
}

// Response containing the status of the EchoSphere AI-vCPU
message VCPUStatusResponse {
    string overall_status = 1;                          // E.g., "OPERATIONAL", "DEGRADED", "INITIALIZING"
    message CoreStatus {
        string core_id = 1;
        string status = 2;                              // E.g., "IDLE", "PROCESSING", "ERROR"
        int32 current_load_percentage = 3;              // 0-100
        int32 pending_tasks_on_core = 4;
    }
    repeated CoreStatus core_statuses = 2;              // Status for each (or filtered) specialized core
    int32 total_pending_tasks = 3;                      // Total tasks pending across all cores
    map<string, string> vcpu_metadata = 4;              // E.g., version, uptime
}


// ASOL Service Definition
service AsolService {
    // Generates/Optimizes a prompt based on the request
    // This might internally create an AiTaskRequest for the vCPU
    rpc GenerateOptimizedPrompt(PromptGenerationRequest) returns (PromptGenerationResponse);

    // Submits feedback about a previously generated prompt and its LLM response
    // This might internally create an AiTaskRequest for the vCPU
    rpc SubmitPromptFeedback(PromptFeedbackRequest) returns (PromptFeedbackResponse);

    // Generic RPC to submit a task directly to the AI-vCPU via ASOL
    rpc SubmitAiTask(AiTaskRequest) returns (AiTaskResponse);

    // Generic RPC to get AI-vCPU status via ASOL
    rpc GetVCPUStatus(VCPUStatusRequest) returns (VCPUStatusResponse);

    // --- Specific Feature RPCs that might use AiTaskRequests internally ---

    // Requests a summary of provided page content.
    rpc GetPageSummary(PageSummaryRequest) returns (PageSummaryResponse);

    // Handles various content creation/assistance tasks.
    rpc HandleContentCreation(ContentCreationRpcRequest) returns (ContentCreationRpcResponse);
}

// --- Messages for GetPageSummary RPC ---

// Re-using SummaryLengthPreference from AiTaskRequest context, or define locally
// For simplicity, assume client (browser Mojo caller) uses a similar enum and ASOL translates.
// Or, define it here if this proto is the sole source of truth for this RPC.
// Let's define it here for clarity of this service contract.
enum PageSummaryLengthPreference {
    PAGE_SUMMARY_LENGTH_DEFAULT = 0;
    PAGE_SUMMARY_LENGTH_SHORT = 1;
    PAGE_SUMMARY_LENGTH_MEDIUM = 2;
    PAGE_SUMMARY_LENGTH_DETAILED = 3;
}

message PageSummaryRequest {
    string page_content_to_summarize = 1;
    PageSummaryLengthPreference length_preference = 2;
    map<string, string> options = 3; // e.g., {"target_audience": "technical"}
    string user_id = 4;              // Optional
    string session_id = 5;           // Optional
}

message PageSummaryResponse {
    string summary_text = 1;
    string error_message = 2;        // Empty if successful
    map<string, string> metadata = 3; // e.g., {"source_language": "en", "word_count": "150"}
}

// --- Messages for HandleContentCreation RPC ---

enum WritingAssistanceTypeProto {
    WRITING_ASSISTANCE_TYPE_UNSPECIFIED = 0;
    REPHRASE_GENERAL = 1;
    REPHRASE_CASUAL = 2;
    REPHRASE_FORMAL = 3;
    REPHRASE_CONCISE = 4;
    REPHRASE_EXPAND = 5;
    CORRECT_GRAMMAR_SPELLING = 6;
    CHANGE_TONE_FRIENDLY = 7;
    CHANGE_TONE_PROFESSIONAL = 8;
    CHANGE_TONE_PERSUASIVE = 9;
}

message WritingAssistanceOptionsProto {
    WritingAssistanceTypeProto assistance_type = 1;
    string original_language = 2; // Optional, e.g., "en-US"
}

message LanguagePairProto {
    string source_language = 1; // e.g., "en-US", "auto"
    string target_language = 2; // e.g., "es-ES"
}

enum CreativeContentTypeProto {
    CREATIVE_CONTENT_TYPE_UNSPECIFIED = 0;
    EMAIL_DRAFT = 1;
    SOCIAL_MEDIA_POST_TWITTER = 2;
    SOCIAL_MEDIA_POST_LINKEDIN = 3;
    BLOG_POST_INTRO = 4;
    PRODUCT_DESCRIPTION = 5;
    BRAINSTORM_IDEAS_LIST = 6;
    SHORT_STORY_SNIPPET = 7;
    POEM_SNIPPET = 8;
    HEADLINE_SUGGESTIONS = 9;
}

message CreativeContentOptionsProto {
    CreativeContentTypeProto content_type = 1;
    string topic_or_brief = 2;
    int32 desired_length_words = 3;
    string desired_tone = 4; // Optional
}

message WritingAssistanceRpcRequest {
    string selected_text = 1;
    WritingAssistanceOptionsProto options = 2;
}

message TranslationRpcRequest {
    string text_to_translate = 1;
    LanguagePairProto languages = 2;
}

message CreativeContentRpcRequest {
    CreativeContentOptionsProto options = 1;
}

message ContentCreationRpcRequest {
    oneof request_type {
        WritingAssistanceRpcRequest writing_assistance = 1;
        TranslationRpcRequest translation = 2;
        CreativeContentRpcRequest creative_content = 3;
    }
    string user_id = 4;      // Optional
    string session_id = 5;   // Optional
}

message ContentCreationRpcResponse {
    string resulting_text = 1;   // The main output text (rephrased, translated, generated)
    string error_message = 2;    // Empty if successful
    map<string, string> metadata = 3; // e.g., language detected, tokens used
}
