#ifndef DASHAI_BROWSER_BROWSER_CORE_CHROME_BROWSER_AI_FEATURES_SEARCH_DISCOVERY_SERVICE_H_
#define DASHAI_BROWSER_BROWSER_CORE_CHROME_BROWSER_AI_FEATURES_SEARCH_DISCOVERY_SERVICE_H_

#include <string>
#include <vector>
#include <functional> // For std::function
#include <cstdint>  // For uint8_t, uint32_t

// --- Conceptual Base Callback (if not using Chromium's base::OnceCallback) ---
namespace base_conceptual {
    template <typename Signature>
    using OnceCallback = std::function<Signature>;
} // namespace base_conceptual

// --- Conceptual Mojo Generated Enums/Structs (if not including actual .mojom.h) ---
// These would normally be generated by the Mojo bindings generator from search_discovery.mojom
namespace dashaibrowser {
namespace mojom {

    // Forward declare if full definition is in a .mojom.h file not available here
    struct ContextualSearchOptions;
    struct SearchResponse;
    struct RecommendationOptions;
    struct RecommendationList;
    struct PredictedNextStep;
    class SearchAndDiscovery; // The interface

    // Minimal conceptual definitions if the .mojom.h is not included/generated:
    struct ContextualSearchOptions {
        bool include_history = true;
        bool include_bookmarks = true;
        std::string current_page_url; // Conceptual: string? mapped to std::string
        std::string current_page_context_summary; // Conceptual: string? mapped to std::string
        uint32_t max_results = 10;
        ContextualSearchOptions() = default;
    };

    struct SearchResultItem { // Reused for recommendations
        std::string url;
        std::string title;
        std::string snippet;
        double relevance_score = 0.0;
        std::string source_type;
        std::string thumbnail_url_or_data; // Conceptual: string?
        std::map<std::string, std::string> additional_metadata;
    };

    struct SearchResponse {
        std::vector<SearchResultItem> results;
        std::string suggested_query_correction; // Conceptual: string?
        std::string error_message; // Conceptual: string?
    };

    struct RecommendationOptions {
        uint32_t max_recommendations = 5;
        std::string current_page_context_summary; // Conceptual: string?
        bool exclude_recently_viewed = true;
        RecommendationOptions() = default;
    };

    struct RecommendationList {
        std::vector<SearchResultItem> recommendations;
        std::string error_message; // Conceptual: string?
    };

    struct PredictedNextStep {
        std::string predicted_url;
        std::string prediction_reason;
        double confidence_score = 0.0;
        std::string error_message; // Conceptual: string?
    };

    // Conceptual Ptr equivalents for Mojo structs
    using ContextualSearchOptionsPtr = std::unique_ptr<ContextualSearchOptions>;
    using RecommendationOptionsPtr = std::unique_ptr<RecommendationOptions>;
    // For array<uint8> image_data, C++ equivalent is often std::vector<uint8_t>
    // For string?, C++ might use std::optional<std::string> (C++17) or just string and check empty.

    class SearchAndDiscovery; // Forward declaration

} // namespace mojom
} // namespace dashaibrowser
// --- End Conceptual Mojo Generated Enums/Structs ---


// --- Conceptual Mojo Remote (copied for now) ---
namespace mojo_conceptual {
    template <typename Interface>
    class Remote {
    public:
        Remote() : connected_(false) {}
        bool is_bound() const { return connected_; }
        void reset() { connected_ = false; }
        void Bind() { connected_ = true; }
        Interface* get() {
            if (!connected_) return nullptr;
            static Interface conceptual_proxy_instance;
            return &conceptual_proxy_instance;
        }
        Interface* operator->() { return get(); }
        explicit operator bool() const { return connected_; }
    private:
        bool connected_;
    };
} // namespace mojo_conceptual
// --- End Conceptual Mojo Remote ---


class SearchDiscoveryService {
public:
    // Callback types
    using SearchCallback = base_conceptual::OnceCallback<void(dashaibrowser::mojom::SearchResponse)>;
    using RecommendationCallback = base_conceptual::OnceCallback<void(dashaibrowser::mojom::RecommendationList)>;
    using PredictionCallback = base_conceptual::OnceCallback<void(dashaibrowser::mojom::PredictedNextStep)>;

    SearchDiscoveryService();
    ~SearchDiscoveryService();

    virtual void RequestContextualSearch(
        const std::string& query,
        const std::string& current_page_content_summary, // string? mapped to string
        dashaibrowser::mojom::ContextualSearchOptionsPtr options,
        SearchCallback callback);

    virtual void RequestMultimodalSearch(
        const std::vector<uint8_t>& image_data, // array<uint8> mapped to vector
        const std::string& textual_context,      // string? mapped to string
        dashaibrowser::mojom::ContextualSearchOptionsPtr options,
        SearchCallback callback);

    virtual void GetContentRecommendations(
        const std::string& user_id,
        dashaibrowser::mojom::RecommendationOptionsPtr options,
        RecommendationCallback callback);

    virtual void PredictNextBrowsingStep(
        const std::string& current_url,
        const std::vector<std::string>& recent_history_urls, // array<string>
        PredictionCallback callback);

    void SetRemoteForTesting(mojo_conceptual::Remote<dashaibrowser::mojom::SearchAndDiscovery> remote);

private:
    mojo_conceptual::Remote<dashaibrowser::mojom::SearchAndDiscovery> remote_search_discovery_;
};

#endif // DASHAI_BROWSER_BROWSER_CORE_CHROME_BROWSER_AI_FEATURES_SEARCH_DISCOVERY_SERVICE_H_
