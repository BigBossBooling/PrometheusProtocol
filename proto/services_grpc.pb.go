// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PromptService_GeneratePrompt_FullMethodName = "/prometheus.PromptService/GeneratePrompt"
	PromptService_SubmitFeedback_FullMethodName = "/prometheus.PromptService/SubmitFeedback"
	PromptService_OptimizePrompt_FullMethodName = "/prometheus.PromptService/OptimizePrompt"
)

// PromptServiceClient is the client API for PromptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PromptService is a gRPC service for generating prompts.
type PromptServiceClient interface {
	GeneratePrompt(ctx context.Context, in *PromptGenerationRequest, opts ...grpc.CallOption) (*GeneratedPrompt, error)
	SubmitFeedback(ctx context.Context, in *OptimizationFeedback, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error)
	OptimizePrompt(ctx context.Context, in *PromptOptimizationState, opts ...grpc.CallOption) (*PromptTemplate, error)
}

type promptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromptServiceClient(cc grpc.ClientConnInterface) PromptServiceClient {
	return &promptServiceClient{cc}
}

func (c *promptServiceClient) GeneratePrompt(ctx context.Context, in *PromptGenerationRequest, opts ...grpc.CallOption) (*GeneratedPrompt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratedPrompt)
	err := c.cc.Invoke(ctx, PromptService_GeneratePrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promptServiceClient) SubmitFeedback(ctx context.Context, in *OptimizationFeedback, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitFeedbackResponse)
	err := c.cc.Invoke(ctx, PromptService_SubmitFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promptServiceClient) OptimizePrompt(ctx context.Context, in *PromptOptimizationState, opts ...grpc.CallOption) (*PromptTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptTemplate)
	err := c.cc.Invoke(ctx, PromptService_OptimizePrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromptServiceServer is the server API for PromptService service.
// All implementations must embed UnimplementedPromptServiceServer
// for forward compatibility.
//
// PromptService is a gRPC service for generating prompts.
type PromptServiceServer interface {
	GeneratePrompt(context.Context, *PromptGenerationRequest) (*GeneratedPrompt, error)
	SubmitFeedback(context.Context, *OptimizationFeedback) (*SubmitFeedbackResponse, error)
	OptimizePrompt(context.Context, *PromptOptimizationState) (*PromptTemplate, error)
	mustEmbedUnimplementedPromptServiceServer()
}

// UnimplementedPromptServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPromptServiceServer struct{}

func (UnimplementedPromptServiceServer) GeneratePrompt(context.Context, *PromptGenerationRequest) (*GeneratedPrompt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePrompt not implemented")
}
func (UnimplementedPromptServiceServer) SubmitFeedback(context.Context, *OptimizationFeedback) (*SubmitFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedback not implemented")
}
func (UnimplementedPromptServiceServer) OptimizePrompt(context.Context, *PromptOptimizationState) (*PromptTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizePrompt not implemented")
}
func (UnimplementedPromptServiceServer) mustEmbedUnimplementedPromptServiceServer() {}
func (UnimplementedPromptServiceServer) testEmbeddedByValue()                       {}

// UnsafePromptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromptServiceServer will
// result in compilation errors.
type UnsafePromptServiceServer interface {
	mustEmbedUnimplementedPromptServiceServer()
}

func RegisterPromptServiceServer(s grpc.ServiceRegistrar, srv PromptServiceServer) {
	// If the following call pancis, it indicates UnimplementedPromptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PromptService_ServiceDesc, srv)
}

func _PromptService_GeneratePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServiceServer).GeneratePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromptService_GeneratePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServiceServer).GeneratePrompt(ctx, req.(*PromptGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromptService_SubmitFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizationFeedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServiceServer).SubmitFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromptService_SubmitFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServiceServer).SubmitFeedback(ctx, req.(*OptimizationFeedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromptService_OptimizePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptOptimizationState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServiceServer).OptimizePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PromptService_OptimizePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServiceServer).OptimizePrompt(ctx, req.(*PromptOptimizationState))
	}
	return interceptor(ctx, in, info, handler)
}

// PromptService_ServiceDesc is the grpc.ServiceDesc for PromptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prometheus.PromptService",
	HandlerType: (*PromptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePrompt",
			Handler:    _PromptService_GeneratePrompt_Handler,
		},
		{
			MethodName: "SubmitFeedback",
			Handler:    _PromptService_SubmitFeedback_Handler,
		},
		{
			MethodName: "OptimizePrompt",
			Handler:    _PromptService_OptimizePrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}
